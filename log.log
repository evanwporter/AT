DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=192)
           2	LOAD_GLOBAL(arg=0, lineno=192)
           4	LOAD_GLOBAL(arg=1, lineno=192)
           6	LOAD_FAST(arg=0, lineno=192)
           8	CALL_FUNCTION(arg=1, lineno=192)
          10	CALL_FUNCTION(arg=1, lineno=192)
          12	GET_ITER(arg=None, lineno=192)
>         14	FOR_ITER(arg=42, lineno=192)
          16	STORE_FAST(arg=3, lineno=192)
          18	LOAD_FAST(arg=0, lineno=193)
          20	LOAD_FAST(arg=3, lineno=193)
          22	BINARY_SUBSCR(arg=None, lineno=193)
          24	LOAD_GLOBAL(arg=2, lineno=193)
          26	COMPARE_OP(arg=2, lineno=193)
          28	POP_JUMP_IF_FALSE(arg=40, lineno=193)
          30	LOAD_GLOBAL(arg=2, lineno=194)
          32	LOAD_FAST(arg=1, lineno=194)
          34	LOAD_FAST(arg=3, lineno=194)
          36	STORE_SUBSCR(arg=None, lineno=194)
          38	JUMP_ABSOLUTE(arg=14, lineno=194)
>         40	LOAD_FAST(arg=0, lineno=196)
          42	LOAD_FAST(arg=3, lineno=196)
          44	BINARY_SUBSCR(arg=None, lineno=196)
          46	LOAD_FAST(arg=2, lineno=196)
          48	BINARY_MULTIPLY(arg=None, lineno=196)
          50	LOAD_FAST(arg=1, lineno=196)
          52	LOAD_FAST(arg=3, lineno=196)
          54	STORE_SUBSCR(arg=None, lineno=196)
          56	JUMP_ABSOLUTE(arg=14, lineno=196)
>         58	LOAD_CONST(arg=0, lineno=196)
          60	RETURN_VALUE(arg=None, lineno=196)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=192)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=192)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=192)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=192)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=192)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$indata6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=192)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=192)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=42, lineno=192)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=RETURN_VALUE(arg=None, lineno=196)
DEBUG:numba.core.byteflow:stack ['$const58.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=3, lineno=192)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$indata18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$indata18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=2, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=COMPARE_OP(arg=2, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$24load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=40, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$26compare_op.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=40, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=40 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi30.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0', '$30load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0', '$30load_global.1', '$outdata32.2']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=STORE_SUBSCR(arg=None, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0', '$30load_global.1', '$outdata32.2', '$i34.3']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=JUMP_ABSOLUTE(arg=14, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=40 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi40.0']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$indata40.1']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$indata40.1', '$i42.2']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$44binary_subscr.3']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$44binary_subscr.3', '$factor46.4']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$48binary_multiply.5']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$48binary_multiply.5', '$outdata50.6']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$48binary_multiply.5', '$outdata50.6', '$i52.7']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=JUMP_ABSOLUTE(arg=14, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=40 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi40.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$indata6.2'}), (8, {'func': '$4load_global.1', 'args': ['$indata6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$indata18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$indata18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$24load_global.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$24load_global.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 40: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$outdata32.2'}), (34, {'res': '$i34.3'}), (36, {'target': '$outdata32.2', 'index': '$i34.3', 'value': '$30load_global.1'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'res': '$indata40.1'}), (42, {'res': '$i42.2'}), (44, {'index': '$i42.2', 'target': '$indata40.1', 'res': '$44binary_subscr.3'}), (46, {'res': '$factor46.4'}), (48, {'lhs': '$44binary_subscr.3', 'rhs': '$factor46.4', 'res': '$48binary_multiply.5'}), (50, {'res': '$outdata50.6'}), (52, {'res': '$i52.7'}), (54, {'target': '$outdata50.6', 'index': '$i52.7', 'value': '$48binary_multiply.5'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi40.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'retval': '$const58.0', 'castval': '$60return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    indata = arg(0, name=indata)             ['indata']
    outdata = arg(1, name=outdata)           ['outdata']
    factor = arg(2, name=factor)             ['factor']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(indata, func=$4load_global.1, args=[Var(indata, converted_types.py:192)], kws=(), vararg=None) ['$4load_global.1', '$8call_function.3', 'indata']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, converted_types.py:192)], kws=(), vararg=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 58             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=indata, index=i) ['$22binary_subscr.4', 'i', 'indata']
    $24load_global.5 = global(nat: -9223372036854775808) ['$24load_global.5']
    $26compare_op.6 = $22binary_subscr.4 == $24load_global.5 ['$22binary_subscr.4', '$24load_global.5', '$26compare_op.6']
    branch $26compare_op.6, 30, 40           ['$26compare_op.6']
label 30:
    $30load_global.1 = global(nat: -9223372036854775808) ['$30load_global.1']
    outdata[i] = $30load_global.1            ['$30load_global.1', 'i', 'outdata']
    jump 14                                  []
label 40:
    $44binary_subscr.3 = getitem(value=indata, index=i) ['$44binary_subscr.3', 'i', 'indata']
    $48binary_multiply.5 = $44binary_subscr.3 * factor ['$44binary_subscr.3', '$48binary_multiply.5', 'factor']
    outdata[i] = $48binary_multiply.5        ['$48binary_multiply.5', 'i', 'outdata']
    jump 14                                  []
label 58:
    $const58.0 = const(NoneType, None)       ['$const58.0']
    $60return_value.1 = cast(value=$const58.0) ['$60return_value.1', '$const58.0']
    return $60return_value.1                 ['$60return_value.1']

DEBUG:numba.core.ssa:-----------------------------------BEFORE SSA-----------------------------------
DEBUG:numba.core.ssa:label 0:
    indata = arg(0, name=indata)             ['indata']
    outdata = arg(1, name=outdata)           ['outdata']
    factor = arg(2, name=factor)             ['factor']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(indata, func=$4load_global.1, args=[Var(indata, converted_types.py:192)], kws=(), vararg=None) ['$4load_global.1', '$8call_function.3', 'indata']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, converted_types.py:192)], kws=(), vararg=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 58             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=indata, index=i) ['$22binary_subscr.4', 'i', 'indata']
    $24load_global.5 = global(nat: -9223372036854775808) ['$24load_global.5']
    $26compare_op.6 = $22binary_subscr.4 == $24load_global.5 ['$22binary_subscr.4', '$24load_global.5', '$26compare_op.6']
    branch $26compare_op.6, 30, 40           ['$26compare_op.6']
label 30:
    $30load_global.1 = global(nat: -9223372036854775808) ['$30load_global.1']
    outdata[i] = $30load_global.1            ['$30load_global.1', 'i', 'outdata']
    jump 59                                  []
label 40:
    $44binary_subscr.3 = getitem(value=indata, index=i) ['$44binary_subscr.3', 'i', 'indata']
    $48binary_multiply.5 = $44binary_subscr.3 * factor ['$44binary_subscr.3', '$48binary_multiply.5', 'factor']
    outdata[i] = $48binary_multiply.5        ['$48binary_multiply.5', 'i', 'outdata']
    jump 59                                  []
label 58:
    $const58.0 = const(NoneType, None)       ['$const58.0']
    $60return_value.1 = cast(value=$const58.0) ['$60return_value.1', '$const58.0']
    return $60return_value.1                 ['$60return_value.1']
label 59:
    jump 14                                  []

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF655A040>
DEBUG:numba.core.ssa:on stmt: indata = arg(0, name=indata)
DEBUG:numba.core.ssa:on stmt: outdata = arg(1, name=outdata)
DEBUG:numba.core.ssa:on stmt: factor = arg(2, name=factor)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(indata, func=$4load_global.1, args=[Var(indata, converted_types.py:192)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, converted_types.py:192)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF655A040>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF655A040>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=indata, index=i)
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(nat: -9223372036854775808)
DEBUG:numba.core.ssa:on stmt: $26compare_op.6 = $22binary_subscr.4 == $24load_global.5
DEBUG:numba.core.ssa:on stmt: branch $26compare_op.6, 30, 40
DEBUG:numba.core.ssa:==== SSA block analysis pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF655A040>
DEBUG:numba.core.ssa:on stmt: $30load_global.1 = global(nat: -9223372036854775808)
DEBUG:numba.core.ssa:on stmt: outdata[i] = $30load_global.1
DEBUG:numba.core.ssa:on stmt: jump 59
DEBUG:numba.core.ssa:==== SSA block analysis pass on 40
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF655A040>
DEBUG:numba.core.ssa:on stmt: $44binary_subscr.3 = getitem(value=indata, index=i)
DEBUG:numba.core.ssa:on stmt: $48binary_multiply.5 = $44binary_subscr.3 * factor
DEBUG:numba.core.ssa:on stmt: outdata[i] = $48binary_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 59
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF655A040>
DEBUG:numba.core.ssa:on stmt: $const58.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $60return_value.1 = cast(value=$const58.0)
DEBUG:numba.core.ssa:on stmt: return $60return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 59
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF655A040>
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001FFF6554430>],
             '$12get_iter.5': [<numba.core.ir.Assign object at 0x000001FFF6554580>],
             '$14for_iter.1': [<numba.core.ir.Assign object at 0x000001FFF65548E0>],
             '$14for_iter.2': [<numba.core.ir.Assign object at 0x000001FFF6554A00>],
             '$14for_iter.3': [<numba.core.ir.Assign object at 0x000001FFF6554B20>],
             '$22binary_subscr.4': [<numba.core.ir.Assign object at 0x000001FFF655A1C0>],
             '$24load_global.5': [<numba.core.ir.Assign object at 0x000001FFF655A340>],
             '$26compare_op.6': [<numba.core.ir.Assign object at 0x000001FFF655A4C0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001FFF6532E20>],
             '$30load_global.1': [<numba.core.ir.Assign object at 0x000001FFF655A700>],
             '$44binary_subscr.3': [<numba.core.ir.Assign object at 0x000001FFF655AE80>],
             '$48binary_multiply.5': [<numba.core.ir.Assign object at 0x000001FFF6560160>],
             '$4load_global.1': [<numba.core.ir.Assign object at 0x000001FFF6532FA0>],
             '$60return_value.1': [<numba.core.ir.Assign object at 0x000001FFF6560700>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000001FFF65542B0>],
             '$const58.0': [<numba.core.ir.Assign object at 0x000001FFF6560580>],
             '$phi14.0': [<numba.core.ir.Assign object at 0x000001FFF6554130>],
             '$phi16.1': [<numba.core.ir.Assign object at 0x000001FFF65547F0>],
             'factor': [<numba.core.ir.Assign object at 0x000001FFF6532CA0>],
             'i': [<numba.core.ir.Assign object at 0x000001FFF6554DC0>],
             'indata': [<numba.core.ir.Assign object at 0x000001FFF6532A60>],
             'outdata': [<numba.core.ir.Assign object at 0x000001FFF6532B80>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.ssa:-----------------------------------AFTER SSA------------------------------------
DEBUG:numba.core.ssa:label 0:
    indata = arg(0, name=indata)             ['indata']
    outdata = arg(1, name=outdata)           ['outdata']
    factor = arg(2, name=factor)             ['factor']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(indata, func=$4load_global.1, args=[Var(indata, converted_types.py:192)], kws=(), vararg=None) ['$4load_global.1', '$8call_function.3', 'indata']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, converted_types.py:192)], kws=(), vararg=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 58             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=indata, index=i) ['$22binary_subscr.4', 'i', 'indata']
    $24load_global.5 = global(nat: -9223372036854775808) ['$24load_global.5']
    $26compare_op.6 = $22binary_subscr.4 == $24load_global.5 ['$22binary_subscr.4', '$24load_global.5', '$26compare_op.6']
    branch $26compare_op.6, 30, 40           ['$26compare_op.6']
label 30:
    $30load_global.1 = global(nat: -9223372036854775808) ['$30load_global.1']
    outdata[i] = $30load_global.1            ['$30load_global.1', 'i', 'outdata']
    jump 59                                  []
label 40:
    $44binary_subscr.3 = getitem(value=indata, index=i) ['$44binary_subscr.3', 'i', 'indata']
    $48binary_multiply.5 = $44binary_subscr.3 * factor ['$44binary_subscr.3', '$48binary_multiply.5', 'factor']
    outdata[i] = $48binary_multiply.5        ['$48binary_multiply.5', 'i', 'outdata']
    jump 59                                  []
label 58:
    $const58.0 = const(NoneType, None)       ['$const58.0']
    $60return_value.1 = cast(value=$const58.0) ['$60return_value.1', '$const58.0']
    return $60return_value.1                 ['$60return_value.1']
label 59:
    jump 14                                  []

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$data4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$data4.1'}), (6, {'func': '$2load_global.0', 'args': ['$data4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    data = arg(0, name=data)                 ['data']
    $2load_global.0 = global(__numba_cls_: <class 'numba.experimental.jitclass.base.NumpyIO'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(data, func=$2load_global.0, args=[Var(data, <string>:3)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'data']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:-----------------------------------BEFORE SSA-----------------------------------
DEBUG:numba.core.ssa:label 0:
    data = arg(0, name=data)                 ['data']
    $2load_global.0 = global(__numba_cls_: <class 'numba.experimental.jitclass.base.NumpyIO'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(data, func=$2load_global.0, args=[Var(data, <string>:3)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'data']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF6748DC0>
DEBUG:numba.core.ssa:on stmt: data = arg(0, name=data)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(__numba_cls_: <class 'numba.experimental.jitclass.base.NumpyIO'>)
DEBUG:numba.core.ssa:on stmt: $6call_function.2 = call $2load_global.0(data, func=$2load_global.0, args=[Var(data, <string>:3)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x000001FFF674D970>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x000001FFF674DC40>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x000001FFF674DD90>],
             'data': [<numba.core.ir.Assign object at 0x000001FFF674D7F0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.ssa:-----------------------------------AFTER SSA------------------------------------
DEBUG:numba.core.ssa:label 0:
    data = arg(0, name=data)                 ['data']
    $2load_global.0 = global(__numba_cls_: <class 'numba.experimental.jitclass.base.NumpyIO'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(data, func=$2load_global.0, args=[Var(data, <string>:3)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'data']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=193)
           2	LOAD_FAST(arg=1, lineno=193)
           4	LOAD_FAST(arg=0, lineno=193)
           6	STORE_ATTR(arg=0, lineno=193)
           8	LOAD_FAST(arg=1, lineno=194)
          10	LOAD_ATTR(arg=1, lineno=194)
          12	LOAD_FAST(arg=0, lineno=194)
          14	STORE_ATTR(arg=2, lineno=194)
          16	LOAD_CONST(arg=1, lineno=195)
          18	LOAD_FAST(arg=0, lineno=195)
          20	STORE_ATTR(arg=3, lineno=195)
          22	LOAD_CONST(arg=0, lineno=195)
          24	RETURN_VALUE(arg=None, lineno=195)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=193)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=193)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=193)
DEBUG:numba.core.byteflow:stack ['$data2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=STORE_ATTR(arg=0, lineno=193)
DEBUG:numba.core.byteflow:stack ['$data2.0', '$self4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=194)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=194)
DEBUG:numba.core.byteflow:stack ['$data8.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=194)
DEBUG:numba.core.byteflow:stack ['$10load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=STORE_ATTR(arg=2, lineno=194)
DEBUG:numba.core.byteflow:stack ['$10load_attr.3', '$self12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=195)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=195)
DEBUG:numba.core.byteflow:stack ['$const16.5']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_ATTR(arg=3, lineno=195)
DEBUG:numba.core.byteflow:stack ['$const16.5', '$self18.6']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=195)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=195)
DEBUG:numba.core.byteflow:stack ['$const22.7']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$data2.0'}), (4, {'res': '$self4.1'}), (6, {'target': '$self4.1', 'value': '$data2.0'}), (8, {'res': '$data8.2'}), (10, {'item': '$data8.2', 'res': '$10load_attr.3'}), (12, {'res': '$self12.4'}), (14, {'target': '$self12.4', 'value': '$10load_attr.3'}), (16, {'res': '$const16.5'}), (18, {'res': '$self18.6'}), (20, {'target': '$self18.6', 'value': '$const16.5'}), (22, {'res': '$const22.7'}), (24, {'retval': '$const22.7', 'castval': '$24return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    self = arg(0, name=self)                 ['self']
    data = arg(1, name=data)                 ['data']
    (self).data = data                       ['data', 'self']
    $10load_attr.3 = getattr(value=data, attr=size) ['$10load_attr.3', 'data']
    (self).len = $10load_attr.3              ['$10load_attr.3', 'self']
    $const16.5 = const(int, 0)               ['$const16.5']
    (self).loc = $const16.5                  ['$const16.5', 'self']
    $const22.7 = const(NoneType, None)       ['$const22.7']
    $24return_value.8 = cast(value=$const22.7) ['$24return_value.8', '$const22.7']
    return $24return_value.8                 ['$24return_value.8']

DEBUG:numba.core.ssa:-----------------------------------BEFORE SSA-----------------------------------
DEBUG:numba.core.ssa:label 0:
    self = arg(0, name=self)                 ['self']
    data = arg(1, name=data)                 ['data']
    (self).data = data                       ['data', 'self']
    $10load_attr.3 = getattr(value=data, attr=size) ['$10load_attr.3', 'data']
    (self).len = $10load_attr.3              ['$10load_attr.3', 'self']
    $const16.5 = const(int, 0)               ['$const16.5']
    (self).loc = $const16.5                  ['$const16.5', 'self']
    $const22.7 = const(NoneType, None)       ['$const22.7']
    $24return_value.8 = cast(value=$const22.7) ['$24return_value.8', '$const22.7']
    return $24return_value.8                 ['$24return_value.8']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF6750F70>
DEBUG:numba.core.ssa:on stmt: self = arg(0, name=self)
DEBUG:numba.core.ssa:on stmt: data = arg(1, name=data)
DEBUG:numba.core.ssa:on stmt: (self).data = data
DEBUG:numba.core.ssa:on stmt: $10load_attr.3 = getattr(value=data, attr=size)
DEBUG:numba.core.ssa:on stmt: (self).len = $10load_attr.3
DEBUG:numba.core.ssa:on stmt: $const16.5 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: (self).loc = $const16.5
DEBUG:numba.core.ssa:on stmt: $const22.7 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $24return_value.8 = cast(value=$const22.7)
DEBUG:numba.core.ssa:on stmt: return $24return_value.8
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_attr.3': [<numba.core.ir.Assign object at 0x000001FFF674D280>],
             '$24return_value.8': [<numba.core.ir.Assign object at 0x000001FFF67584F0>],
             '$const16.5': [<numba.core.ir.Assign object at 0x000001FFF6748940>],
             '$const22.7': [<numba.core.ir.Assign object at 0x000001FFF6758400>],
             'data': [<numba.core.ir.Assign object at 0x000001FFF6750580>],
             'self': [<numba.core.ir.Assign object at 0x000001FFF6750670>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.ssa:-----------------------------------AFTER SSA------------------------------------
DEBUG:numba.core.ssa:label 0:
    self = arg(0, name=self)                 ['self']
    data = arg(1, name=data)                 ['data']
    (self).data = data                       ['data', 'self']
    $10load_attr.3 = getattr(value=data, attr=size) ['$10load_attr.3', 'data']
    (self).len = $10load_attr.3              ['$10load_attr.3', 'self']
    $const16.5 = const(int, 0)               ['$const16.5']
    (self).loc = $const16.5                  ['$const16.5', 'self']
    $const22.7 = const(NoneType, None)       ['$const22.7']
    $24return_value.8 = cast(value=$const22.7) ['$24return_value.8', '$const22.7']
    return $24return_value.8                 ['$24return_value.8']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_FAST(arg=0, lineno=3)
           4	LOAD_ATTR(arg=0, lineno=3)
           6	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$__numba_self_2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$__numba_self_2.0'}), (4, {'item': '$__numba_self_2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=data) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:-----------------------------------BEFORE SSA-----------------------------------
DEBUG:numba.core.ssa:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=data) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF6812F10>
DEBUG:numba.core.ssa:on stmt: __numba_self_ = arg(0, name=__numba_self_)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=__numba_self_, attr=data)
DEBUG:numba.core.ssa:on stmt: $6return_value.2 = cast(value=$4load_attr.1)
DEBUG:numba.core.ssa:on stmt: return $6return_value.2
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x000001FFF6812850>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x000001FFF68129D0>],
             '__numba_self_': [<numba.core.ir.Assign object at 0x000001FFF68125B0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.ssa:-----------------------------------AFTER SSA------------------------------------
DEBUG:numba.core.ssa:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=data) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_FAST(arg=0, lineno=3)
           4	LOAD_ATTR(arg=0, lineno=3)
           6	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$__numba_self_2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$__numba_self_2.0'}), (4, {'item': '$__numba_self_2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=loc) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:-----------------------------------BEFORE SSA-----------------------------------
DEBUG:numba.core.ssa:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=loc) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF682FDC0>
DEBUG:numba.core.ssa:on stmt: __numba_self_ = arg(0, name=__numba_self_)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=__numba_self_, attr=loc)
DEBUG:numba.core.ssa:on stmt: $6return_value.2 = cast(value=$4load_attr.1)
DEBUG:numba.core.ssa:on stmt: return $6return_value.2
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x000001FFF68387F0>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x000001FFF6838970>],
             '__numba_self_': [<numba.core.ir.Assign object at 0x000001FFF6838550>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.ssa:-----------------------------------AFTER SSA------------------------------------
DEBUG:numba.core.ssa:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=loc) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_FAST(arg=0, lineno=3)
           4	LOAD_ATTR(arg=0, lineno=3)
           6	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$__numba_self_2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$__numba_self_2.0'}), (4, {'item': '$__numba_self_2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=len) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:-----------------------------------BEFORE SSA-----------------------------------
DEBUG:numba.core.ssa:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=len) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF6871C10>
DEBUG:numba.core.ssa:on stmt: __numba_self_ = arg(0, name=__numba_self_)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=__numba_self_, attr=len)
DEBUG:numba.core.ssa:on stmt: $6return_value.2 = cast(value=$4load_attr.1)
DEBUG:numba.core.ssa:on stmt: return $6return_value.2
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x000001FFF6888A30>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x000001FFF6888BB0>],
             '__numba_self_': [<numba.core.ir.Assign object at 0x000001FFF6888790>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.ssa:-----------------------------------AFTER SSA------------------------------------
DEBUG:numba.core.ssa:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    $4load_attr.1 = getattr(value=__numba_self_, attr=len) ['$4load_attr.1', '__numba_self_']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_FAST(arg=1, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	STORE_ATTR(arg=0, lineno=3)
           8	LOAD_CONST(arg=0, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$__numba_val2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=STORE_ATTR(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack ['$__numba_val2.0', '$__numba_self_4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=0, lineno=3)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG:numba.core.byteflow:stack ['$const8.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$__numba_val2.0'}), (4, {'res': '$__numba_self_4.1'}), (6, {'target': '$__numba_self_4.1', 'value': '$__numba_val2.0'}), (8, {'res': '$const8.2'}), (10, {'retval': '$const8.2', 'castval': '$10return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    __numba_val = arg(1, name=__numba_val)   ['__numba_val']
    (__numba_self_).loc = __numba_val        ['__numba_self_', '__numba_val']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $10return_value.3 = cast(value=$const8.2) ['$10return_value.3', '$const8.2']
    return $10return_value.3                 ['$10return_value.3']

DEBUG:numba.core.ssa:-----------------------------------BEFORE SSA-----------------------------------
DEBUG:numba.core.ssa:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    __numba_val = arg(1, name=__numba_val)   ['__numba_val']
    (__numba_self_).loc = __numba_val        ['__numba_self_', '__numba_val']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $10return_value.3 = cast(value=$const8.2) ['$10return_value.3', '$const8.2']
    return $10return_value.3                 ['$10return_value.3']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF68272E0>
DEBUG:numba.core.ssa:on stmt: __numba_self_ = arg(0, name=__numba_self_)
DEBUG:numba.core.ssa:on stmt: __numba_val = arg(1, name=__numba_val)
DEBUG:numba.core.ssa:on stmt: (__numba_self_).loc = __numba_val
DEBUG:numba.core.ssa:on stmt: $const8.2 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $10return_value.3 = cast(value=$const8.2)
DEBUG:numba.core.ssa:on stmt: return $10return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.3': [<numba.core.ir.Assign object at 0x000001FFF68A8DC0>],
             '$const8.2': [<numba.core.ir.Assign object at 0x000001FFF68A8C40>],
             '__numba_self_': [<numba.core.ir.Assign object at 0x000001FFF68A86A0>],
             '__numba_val': [<numba.core.ir.Assign object at 0x000001FFF68A87C0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.ssa:-----------------------------------AFTER SSA------------------------------------
DEBUG:numba.core.ssa:label 0:
    __numba_self_ = arg(0, name=__numba_self_) ['__numba_self_']
    __numba_val = arg(1, name=__numba_val)   ['__numba_val']
    (__numba_self_).loc = __numba_val        ['__numba_self_', '__numba_val']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $10return_value.3 = cast(value=$const8.2) ['$10return_value.3', '$const8.2']
    return $10return_value.3                 ['$10return_value.3']

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=192)
           2	LOAD_GLOBAL(arg=0, lineno=192)
           4	LOAD_GLOBAL(arg=1, lineno=192)
           6	LOAD_FAST(arg=0, lineno=192)
           8	CALL_FUNCTION(arg=1, lineno=192)
          10	CALL_FUNCTION(arg=1, lineno=192)
          12	GET_ITER(arg=None, lineno=192)
>         14	FOR_ITER(arg=42, lineno=192)
          16	STORE_FAST(arg=3, lineno=192)
          18	LOAD_FAST(arg=0, lineno=193)
          20	LOAD_FAST(arg=3, lineno=193)
          22	BINARY_SUBSCR(arg=None, lineno=193)
          24	LOAD_GLOBAL(arg=2, lineno=193)
          26	COMPARE_OP(arg=2, lineno=193)
          28	POP_JUMP_IF_FALSE(arg=40, lineno=193)
          30	LOAD_GLOBAL(arg=2, lineno=194)
          32	LOAD_FAST(arg=1, lineno=194)
          34	LOAD_FAST(arg=3, lineno=194)
          36	STORE_SUBSCR(arg=None, lineno=194)
          38	JUMP_ABSOLUTE(arg=14, lineno=194)
>         40	LOAD_FAST(arg=0, lineno=196)
          42	LOAD_FAST(arg=3, lineno=196)
          44	BINARY_SUBSCR(arg=None, lineno=196)
          46	LOAD_FAST(arg=2, lineno=196)
          48	BINARY_MULTIPLY(arg=None, lineno=196)
          50	LOAD_FAST(arg=1, lineno=196)
          52	LOAD_FAST(arg=3, lineno=196)
          54	STORE_SUBSCR(arg=None, lineno=196)
          56	JUMP_ABSOLUTE(arg=14, lineno=196)
>         58	LOAD_CONST(arg=0, lineno=196)
          60	RETURN_VALUE(arg=None, lineno=196)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=192)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=192)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=192)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=192)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=192)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$4load_global.1', '$indata6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=192)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=GET_ITER(arg=None, lineno=192)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$12get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi14.0']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=FOR_ITER(arg=42, lineno=192)
DEBUG:numba.core.byteflow:stack ['$phi14.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=16, stack=('$phi14.0', '$14for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_CONST(arg=0, lineno=196)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=RETURN_VALUE(arg=None, lineno=196)
DEBUG:numba.core.byteflow:stack ['$const58.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=3, lineno=192)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$phi16.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$indata18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$indata18.2', '$i20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=2, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=COMPARE_OP(arg=2, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$22binary_subscr.4', '$24load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=40, lineno=193)
DEBUG:numba.core.byteflow:stack ['$phi16.0', '$26compare_op.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=('$phi16.0',), blockstack=(), npush=0), Edge(pc=40, stack=('$phi16.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=40 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi30.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0', '$30load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0', '$30load_global.1', '$outdata32.2']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=STORE_SUBSCR(arg=None, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0', '$30load_global.1', '$outdata32.2', '$i34.3']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=JUMP_ABSOLUTE(arg=14, lineno=194)
DEBUG:numba.core.byteflow:stack ['$phi30.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi30.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=40 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi40.0']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$indata40.1']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$indata40.1', '$i42.2']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$44binary_subscr.3']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$44binary_subscr.3', '$factor46.4']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$48binary_multiply.5']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$48binary_multiply.5', '$outdata50.6']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0', '$48binary_multiply.5', '$outdata50.6', '$i52.7']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=JUMP_ABSOLUTE(arg=14, lineno=196)
DEBUG:numba.core.byteflow:stack ['$phi40.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=('$phi40.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1), State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=1): {'$phi14.0'},
             State(pc_initial=16 nstack_initial=2): {'$phi16.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=40 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi14.0': State(pc_initial=0 nstack_initial=0),
 '$phi16.1': State(pc_initial=14 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1)),
                          ('$phi40.0', State(pc_initial=40 nstack_initial=1))},
             '$phi16.0': {('$phi14.0', State(pc_initial=14 nstack_initial=1))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi40.0': {('$phi16.0', State(pc_initial=16 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=2))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi14.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi16.1': {('$14for_iter.2',
                           State(pc_initial=14 nstack_initial=1))},
             '$phi30.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$12get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi14.0': {('$12get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi16.1': {('$14for_iter.2', State(pc_initial=14 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi14.0': '$12get_iter.5'},
             State(pc_initial=14 nstack_initial=1): {'$phi16.1': '$14for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$indata6.2'}), (8, {'func': '$4load_global.1', 'args': ['$indata6.2'], 'res': '$8call_function.3'}), (10, {'func': '$2load_global.0', 'args': ['$8call_function.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4', 'res': '$12get_iter.5'})), outgoing_phis={'$phi14.0': '$12get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$12get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=1):
AdaptBlockInfo(insts=((14, {'iterator': '$phi14.0', 'pair': '$14for_iter.1', 'indval': '$14for_iter.2', 'pred': '$14for_iter.3'}),), outgoing_phis={'$phi16.1': '$14for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 16: ('$phi14.0', '$14for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=2):
AdaptBlockInfo(insts=((16, {'value': '$phi16.1'}), (18, {'res': '$indata18.2'}), (20, {'res': '$i20.3'}), (22, {'index': '$i20.3', 'target': '$indata18.2', 'res': '$22binary_subscr.4'}), (24, {'res': '$24load_global.5'}), (26, {'lhs': '$22binary_subscr.4', 'rhs': '$24load_global.5', 'res': '$26compare_op.6'}), (28, {'pred': '$26compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi16.0',), 40: ('$phi16.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'res': '$outdata32.2'}), (34, {'res': '$i34.3'}), (36, {'target': '$outdata32.2', 'index': '$i34.3', 'value': '$30load_global.1'}), (38, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi30.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'res': '$indata40.1'}), (42, {'res': '$i42.2'}), (44, {'index': '$i42.2', 'target': '$indata40.1', 'res': '$44binary_subscr.3'}), (46, {'res': '$factor46.4'}), (48, {'lhs': '$44binary_subscr.3', 'rhs': '$factor46.4', 'res': '$48binary_multiply.5'}), (50, {'res': '$outdata50.6'}), (52, {'res': '$i52.7'}), (54, {'target': '$outdata50.6', 'index': '$i52.7', 'value': '$48binary_multiply.5'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ('$phi40.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'retval': '$const58.0', 'castval': '$60return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    indata = arg(0, name=indata)             ['indata']
    outdata = arg(1, name=outdata)           ['outdata']
    factor = arg(2, name=factor)             ['factor']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(indata, func=$4load_global.1, args=[Var(indata, converted_types.py:192)], kws=(), vararg=None) ['$4load_global.1', '$8call_function.3', 'indata']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, converted_types.py:192)], kws=(), vararg=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 58             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=indata, index=i) ['$22binary_subscr.4', 'i', 'indata']
    $24load_global.5 = global(nat: -9223372036854775808) ['$24load_global.5']
    $26compare_op.6 = $22binary_subscr.4 == $24load_global.5 ['$22binary_subscr.4', '$24load_global.5', '$26compare_op.6']
    branch $26compare_op.6, 30, 40           ['$26compare_op.6']
label 30:
    $30load_global.1 = global(nat: -9223372036854775808) ['$30load_global.1']
    outdata[i] = $30load_global.1            ['$30load_global.1', 'i', 'outdata']
    jump 14                                  []
label 40:
    $44binary_subscr.3 = getitem(value=indata, index=i) ['$44binary_subscr.3', 'i', 'indata']
    $48binary_multiply.5 = $44binary_subscr.3 * factor ['$44binary_subscr.3', '$48binary_multiply.5', 'factor']
    outdata[i] = $48binary_multiply.5        ['$48binary_multiply.5', 'i', 'outdata']
    jump 14                                  []
label 58:
    $const58.0 = const(NoneType, None)       ['$const58.0']
    $60return_value.1 = cast(value=$const58.0) ['$60return_value.1', '$const58.0']
    return $60return_value.1                 ['$60return_value.1']

DEBUG:numba.core.ssa:-----------------------------------BEFORE SSA-----------------------------------
DEBUG:numba.core.ssa:label 0:
    indata = arg(0, name=indata)             ['indata']
    outdata = arg(1, name=outdata)           ['outdata']
    factor = arg(2, name=factor)             ['factor']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(indata, func=$4load_global.1, args=[Var(indata, converted_types.py:192)], kws=(), vararg=None) ['$4load_global.1', '$8call_function.3', 'indata']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, converted_types.py:192)], kws=(), vararg=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 58             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=indata, index=i) ['$22binary_subscr.4', 'i', 'indata']
    $24load_global.5 = global(nat: -9223372036854775808) ['$24load_global.5']
    $26compare_op.6 = $22binary_subscr.4 == $24load_global.5 ['$22binary_subscr.4', '$24load_global.5', '$26compare_op.6']
    branch $26compare_op.6, 30, 40           ['$26compare_op.6']
label 30:
    $30load_global.1 = global(nat: -9223372036854775808) ['$30load_global.1']
    outdata[i] = $30load_global.1            ['$30load_global.1', 'i', 'outdata']
    jump 59                                  []
label 40:
    $44binary_subscr.3 = getitem(value=indata, index=i) ['$44binary_subscr.3', 'i', 'indata']
    $48binary_multiply.5 = $44binary_subscr.3 * factor ['$44binary_subscr.3', '$48binary_multiply.5', 'factor']
    outdata[i] = $48binary_multiply.5        ['$48binary_multiply.5', 'i', 'outdata']
    jump 59                                  []
label 58:
    $const58.0 = const(NoneType, None)       ['$const58.0']
    $60return_value.1 = cast(value=$const58.0) ['$60return_value.1', '$const58.0']
    return $60return_value.1                 ['$60return_value.1']
label 59:
    jump 14                                  []

DEBUG:numba.core.ssa:================================================================================
DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF68DC9A0>
DEBUG:numba.core.ssa:on stmt: indata = arg(0, name=indata)
DEBUG:numba.core.ssa:on stmt: outdata = arg(1, name=outdata)
DEBUG:numba.core.ssa:on stmt: factor = arg(2, name=factor)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $4load_global.1 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $4load_global.1(indata, func=$4load_global.1, args=[Var(indata, converted_types.py:192)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, converted_types.py:192)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $12get_iter.5 = getiter(value=$10call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi14.0 = $12get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF68DC9A0>
DEBUG:numba.core.ssa:on stmt: $14for_iter.1 = iternext(value=$phi14.0)
DEBUG:numba.core.ssa:on stmt: $14for_iter.2 = pair_first(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $14for_iter.3 = pair_second(value=$14for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi16.1 = $14for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $14for_iter.3, 16, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF68DC9A0>
DEBUG:numba.core.ssa:on stmt: i = $phi16.1
DEBUG:numba.core.ssa:on stmt: $22binary_subscr.4 = getitem(value=indata, index=i)
DEBUG:numba.core.ssa:on stmt: $24load_global.5 = global(nat: -9223372036854775808)
DEBUG:numba.core.ssa:on stmt: $26compare_op.6 = $22binary_subscr.4 == $24load_global.5
DEBUG:numba.core.ssa:on stmt: branch $26compare_op.6, 30, 40
DEBUG:numba.core.ssa:==== SSA block analysis pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF68DC9A0>
DEBUG:numba.core.ssa:on stmt: $30load_global.1 = global(nat: -9223372036854775808)
DEBUG:numba.core.ssa:on stmt: outdata[i] = $30load_global.1
DEBUG:numba.core.ssa:on stmt: jump 59
DEBUG:numba.core.ssa:==== SSA block analysis pass on 40
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF68DC9A0>
DEBUG:numba.core.ssa:on stmt: $44binary_subscr.3 = getitem(value=indata, index=i)
DEBUG:numba.core.ssa:on stmt: $48binary_multiply.5 = $44binary_subscr.3 * factor
DEBUG:numba.core.ssa:on stmt: outdata[i] = $48binary_multiply.5
DEBUG:numba.core.ssa:on stmt: jump 59
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF68DC9A0>
DEBUG:numba.core.ssa:on stmt: $const58.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $60return_value.1 = cast(value=$const58.0)
DEBUG:numba.core.ssa:on stmt: return $60return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 59
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x000001FFF68DC9A0>
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000001FFF68CB7F0>],
             '$12get_iter.5': [<numba.core.ir.Assign object at 0x000001FFF68CB940>],
             '$14for_iter.1': [<numba.core.ir.Assign object at 0x000001FFF68CBCA0>],
             '$14for_iter.2': [<numba.core.ir.Assign object at 0x000001FFF68CBDC0>],
             '$14for_iter.3': [<numba.core.ir.Assign object at 0x000001FFF68CBEE0>],
             '$22binary_subscr.4': [<numba.core.ir.Assign object at 0x000001FFF68D0580>],
             '$24load_global.5': [<numba.core.ir.Assign object at 0x000001FFF68D0700>],
             '$26compare_op.6': [<numba.core.ir.Assign object at 0x000001FFF68D0880>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001FFF68CB220>],
             '$30load_global.1': [<numba.core.ir.Assign object at 0x000001FFF68D0AC0>],
             '$44binary_subscr.3': [<numba.core.ir.Assign object at 0x000001FFF68D2280>],
             '$48binary_multiply.5': [<numba.core.ir.Assign object at 0x000001FFF68D2520>],
             '$4load_global.1': [<numba.core.ir.Assign object at 0x000001FFF68CB3A0>],
             '$60return_value.1': [<numba.core.ir.Assign object at 0x000001FFF68D2AC0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x000001FFF68CB670>],
             '$const58.0': [<numba.core.ir.Assign object at 0x000001FFF68D2940>],
             '$phi14.0': [<numba.core.ir.Assign object at 0x000001FFF68CB4F0>],
             '$phi16.1': [<numba.core.ir.Assign object at 0x000001FFF68CBBB0>],
             'factor': [<numba.core.ir.Assign object at 0x000001FFF68CB0A0>],
             'i': [<numba.core.ir.Assign object at 0x000001FFF68D01C0>],
             'indata': [<numba.core.ir.Assign object at 0x000001FFF68BB7C0>],
             'outdata': [<numba.core.ir.Assign object at 0x000001FFF68BBF40>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.ssa:-----------------------------------AFTER SSA------------------------------------
DEBUG:numba.core.ssa:label 0:
    indata = arg(0, name=indata)             ['indata']
    outdata = arg(1, name=outdata)           ['outdata']
    factor = arg(2, name=factor)             ['factor']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $4load_global.1 = global(len: <built-in function len>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(indata, func=$4load_global.1, args=[Var(indata, converted_types.py:192)], kws=(), vararg=None) ['$4load_global.1', '$8call_function.3', 'indata']
    $10call_function.4 = call $2load_global.0($8call_function.3, func=$2load_global.0, args=[Var($8call_function.3, converted_types.py:192)], kws=(), vararg=None) ['$10call_function.4', '$2load_global.0', '$8call_function.3']
    $12get_iter.5 = getiter(value=$10call_function.4) ['$10call_function.4', '$12get_iter.5']
    $phi14.0 = $12get_iter.5                 ['$12get_iter.5', '$phi14.0']
    jump 14                                  []
label 14:
    $14for_iter.1 = iternext(value=$phi14.0) ['$14for_iter.1', '$phi14.0']
    $14for_iter.2 = pair_first(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.2']
    $14for_iter.3 = pair_second(value=$14for_iter.1) ['$14for_iter.1', '$14for_iter.3']
    $phi16.1 = $14for_iter.2                 ['$14for_iter.2', '$phi16.1']
    branch $14for_iter.3, 16, 58             ['$14for_iter.3']
label 16:
    i = $phi16.1                             ['$phi16.1', 'i']
    $22binary_subscr.4 = getitem(value=indata, index=i) ['$22binary_subscr.4', 'i', 'indata']
    $24load_global.5 = global(nat: -9223372036854775808) ['$24load_global.5']
    $26compare_op.6 = $22binary_subscr.4 == $24load_global.5 ['$22binary_subscr.4', '$24load_global.5', '$26compare_op.6']
    branch $26compare_op.6, 30, 40           ['$26compare_op.6']
label 30:
    $30load_global.1 = global(nat: -9223372036854775808) ['$30load_global.1']
    outdata[i] = $30load_global.1            ['$30load_global.1', 'i', 'outdata']
    jump 59                                  []
label 40:
    $44binary_subscr.3 = getitem(value=indata, index=i) ['$44binary_subscr.3', 'i', 'indata']
    $48binary_multiply.5 = $44binary_subscr.3 * factor ['$44binary_subscr.3', '$48binary_multiply.5', 'factor']
    outdata[i] = $48binary_multiply.5        ['$48binary_multiply.5', 'i', 'outdata']
    jump 59                                  []
label 58:
    $const58.0 = const(NoneType, None)       ['$const58.0']
    $60return_value.1 = cast(value=$const58.0) ['$60return_value.1', '$const58.0']
    return $60return_value.1                 ['$60return_value.1']
label 59:
    jump 14                                  []

DEBUG:numba.core.ssa:================================================================================
